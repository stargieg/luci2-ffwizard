#!/bin/sh

. /lib/functions.sh
. /usr/share/libubox/jshn.sh

log() {
	logger -s -t ffwizard_autoconf $@
}

wlan_ifc=""
wifi_restart=0

log "ubus call network.wireless status"
wifi_data=`ubus call network.wireless status`
json_load "$wifi_data"
json_get_keys wifi_res
for i in $wifi_res ; do
	json_select $i
	json_get_var wifi_disabled disabled
	if [ $wifi_disabled == 1 ] ; then
		log "wifi $i is disabled. set enable"
		uci set wireless.$i.disabled=0
		uci set wireless.$i.country=DE
		#uci commit wireless
		wifi_restart=1
	else
		log "wifi $i allready enabled leave it untouch"
	fi
	json_select ".."
done

json_cleanup

if [ $wifi_restart == 1 ] ; then
	log "wifi restart and sleep 20s"
	/etc/init.d/network reload
	/bin/sleep 20
fi
log "ubus call network.wireless status"
wifi_data=`ubus call network.wireless status`
json_load "$wifi_data"
json_get_keys wifi_res
for i in $wifi_res ; do
	json_select $i
	json_get_var wifi_disabled disabled
	if [ $wifi_disabled == 0 ] ; then
		wlan_ifc="$wlan_ifc $i"
	fi
	json_select ".."
done

json_cleanup

#fuckup
ctmode=""
opkg list_installed | grep -q "kmod-ath10k-ct -" && ctmode="1"
nonectmode=""
opkg list_installed | grep -q "kmod-ath10k -" && nonectmode="1"

for ifc in $wlan_ifc ; do
	minchannel=1
	band=$(uci_get wireless $ifc band)
	if [ "$band" == "5g" ] ; then
		minchannel=36
	fi
	hwmode=$(uci_get wireless $ifc hwmode)
	if [ "$hwmode" == "11a" ] ; then
		minchannel=36
	fi
	log "ubus call iwinfo $ifc first scan"
	ubus call iwinfo scan '{ "device": "'$ifc'" }' >/dev/null
	log "ubus call iwinfo $ifc second scan"
	scan_data=$(ubus call iwinfo scan '{ "device": "'$ifc'" }')
	json_load "$scan_data"
	json_select results
	json_get_keys scan_res
	cfgquality=0
	cfgssid=""
	cfgbssid=""
	cfgchannel=""
	mode="mesh"
	for i in $scan_res ; do
		json_select $i
		json_select encryption
		json_get_var sta_encryption enabled
		json_select ".."
		if [ $sta_encryption == 0 ] ; then
			json_get_var sta_mode mode
			# Depricated Ad-Hoc scan
			if [ -z $nonectmode ] && [ "$sta_mode" == "Ad-Hoc" ] ; then
				json_get_var sta_ssid ssid
				if echo "$sta_ssid" | grep -q "freifunk\.net" ; then
					json_get_var sta_quality quality
					json_get_var sta_channel channel
					if [ $sta_channel -ge $minchannel ] ; then
						if [ $sta_quality -gt $cfgquality ] ; then
							cfgquality=$sta_quality
							json_get_var sta_bssid bssid
							#json_get_var sta_signal signal
							#json_get_var sta_quality_max quality_max
							cfgssid=$sta_ssid
							cfgbssid=$sta_bssid
							cfgchannel=$sta_channel
							mode="adhoc"
						fi
					fi
				fi
			fi
			# Mesh Point scan
			if [ -z $ctmode ] && [ "$sta_mode" == "Mesh Point" ] ; then
				json_get_var sta_quality quality
				json_get_var sta_channel channel
				if [ $sta_channel -ge $minchannel ] ; then
					if [ $sta_quality -gt $cfgquality ] ; then
						cfgquality=$sta_quality
						# Additional related Infos
						#json_get_var sta_signal signal
						#json_get_var sta_quality_max quality_max
						cfgchannel=$sta_channel
						mode="mesh"
					fi
				fi
			fi
		fi
		json_select ".."
	done
	json_cleanup
	log "scan result for $ifc channel: $cfgchannel"
	if ! uci_get ffwizard $ifc >/dev/null ; then
		uci_add ffwizard wifi "$ifc"
	fi
	phy_idx=$(echo $ifc | cut -b6)
	uci_set ffwizard "$ifc" phy_idx $phy_idx
	uci_set ffwizard "$ifc" channel $cfgchannel
	uci_set ffwizard "$ifc" olsr_mesh 1
	if [ -z $ctmode ] && [ "$mode" == "mesh" ] ; then
		log "scan result for $ifc channel: $cfgchannel"
		uci_set ffwizard "$ifc" iface_mode "mesh"
	else
		# Depricated Ad-Hoc config
		log "scan result for $ifc ssid: $cfgssid bssid: $cfgbssid channel: $cfgchannel"
		uci_set ffwizard "$ifc" ssid $cfgssid
		uci_set ffwizard "$ifc" bssid $cfgbssid
		uci_set ffwizard "$ifc" iface_mode "adhoc"
	fi
	uci_commit ffwizard
done
